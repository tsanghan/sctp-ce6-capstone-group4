name: Now I am become Death, the Destroyer of Worlds

on:
  workflow_dispatch:
      inputs:
        cluster_name:
          required: true
          type: string

permissions:
  id-token: write
  contents: read

jobs:
  Destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ vars.ROLE_TO_ASSUME }}
        role-session-name: ${{ vars.ROLE_SESSION_NAME }}

    - name: STS Get-Caller-Identity
      run: |
          aws sts get-caller-identity

    - name: Install kubectl
      uses: tsanghan/setup-kubectl-action@main
      with:
        version: '1.31.1'

    - name: Destroy Gateway
      run: |
        aws eks update-cluster-config --name ${{ inputs.cluster_name }} --resources-vpc-config "publicAccessCidrs=$(curl -s api.ipify.org)/32" --output yaml
        test -d ~/.kube || mkdir ~/.kube
        if [[ $(aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ inputs.cluster_name }}) != "" ]]; then
            if [[ "$(kubectl -n demoapp-gw get gateway -o=name)" != "" ]]; then
                echo $(kubectl -n demoapp-gw get gateway -o=name) | xargs -I% kubectl delete -n demoapp-gw %
                sleep 15
            fi
        fi

    - name: Setup Tofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: "1.7.3"
        tofu_wrapper: false

    - name: Tofu Init
      run: |
        cd aws-infra
        tofu init

    - name: Tofu Destroy
      env:
        TF_VAR_MYIP: ${{ vars.TF_VAR_MYIP }}
      run: |
        cd aws-infra
        tofu state rm 'module.make_eks.module.eks.aws_eks_addon.this["amazon-cloudwatch-observability"]'
        tofu state rm 'module.make_eks.module.eks.aws_eks_addon.before_compute["vpc-cni"]'
        tofu destroy -auto-approve

    - name: Install yq
      uses: Makepad-fr/setup-yq-action@main
      with:
        version: '4.44.3'

    - name: Destroy Log_Groups
      run: |
        log_groups=($(aws logs describe-log-groups \
                        --log-group-name-prefix '/aws/containerinsights/${{ inputs.cluster_name }}' | \
                        yq '.logGroups[].logGroupName'))
        echo "${log_groups[@]}
        for log_group in "${log_groups[@]}"; do aws logs delete-log-group --log-group-name $log_group; done